#!/usr/bin/python3
from telegram.ext import Updater, CommandHandler, Filters, MessageHandler, CallbackQueryHandler, PicklePersistence
from telegram import ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton
from telegram.error import NetworkError, Unauthorized, TimedOut
import logging
import os
#from time import time
from datetime import datetime, timedelta
import pickle
import numpy as np
import requests
import time
import json
import threading
from threading import Thread
import config

dn = os.path.dirname(os.path.realpath(__file__))

# Token for telegram bot
TOKEN = config.TOKEN

# Link for donate
DONATE_LINK = config.DONATE_LINK


# Default stores monitoring period:
MONITORING_PERIOD = 2016 #week with 5 min interval

# Pickle to store unique users
USERS_PICKLE = os.path.join(dn,"users.pkl")
# Pickle to store megarmarket and ashan notification users
MM_USERS_PICKLE = os.path.join(dn,"megamarket_users.pkl")
METRO_USERS_PICKLE = os.path.join(dn,"metro_users.pkl")
NOVUS_USERS_PICKLE = os.path.join(dn,"novus_users.pkl")
ASHAN_USERS_PICKLE = os.path.join(dn,"ashan_users.pkl")
FURSHET_USERS_PICKLE = os.path.join(dn,"furshet_users.pkl")
LOG = os.path.join(dn,"zakaz_ua_bot.log")

CHAIN_USERS_PICKLE_DICT = {'Megamarket':MM_USERS_PICKLE, 
                           'Metro':METRO_USERS_PICKLE, 
                           'Novus':NOVUS_USERS_PICKLE, 
                           'Ashan':ASHAN_USERS_PICKLE, 
                           'Furshet':FURSHET_USERS_PICKLE}

CHAIN_STORES_DICT = {'Megamarket':{'48267601':"–ú–µ–≥–∞–ú–∞—Ä–∫–µ—Ç –Ω–∞ –°—É—Ä–∫–æ–≤–∞ 3",
                                   '48267602':"–ú–µ–≥–∞–ú–∞—Ä–∫–µ—Ç '–ö–æ—Å–º–æ–ø–æ–ª—ñ—Ç' –Ω–∞ –í.–ì–µ—Ç—å–º–∞–Ω–∞ 6",
                                   'Vyshhorod':"–ú–∞–≥–∞–º–∞—Ä–∫–µ—Ç - –í–∏—à–≥–æ—Ä–æ–¥", 
                                   'Vyshneve':"–ú–µ–≥–∞–ú–∞—Ä–∫–µ—Ç - –í–∏—à–Ω–µ–≤–µ", 
                                   'Irpin':"–ú–µ–≥–∞–ú–∞—Ä–∫–µ—Ç - –Ü—Ä–ø—ñ–Ω—å", 
                                   'Brovary':"–ú–µ–≥–∞–ú–∞—Ä–∫–µ—Ç - –ë—Ä–æ–≤–∞—Ä–∏", 
                                   'Boryspil':"–ú–µ–≥–∞–ú–∞—Ä–∫–µ—Ç - –ë–æ—Ä–∏—Å–ø—ñ–ª—å"},
                     'Metro':{'48215610':"METRO –Ω–∞ –ì—Ä–∏–≥–æ—Ä–µ–Ω–∫–∞ 43",
                              '48215611':"METRO –¢–µ—Ä–µ–º–∫–∏ –Ω–∞ –ö—ñ–ª—å—Ü–µ–≤–∞ 1–í",
                              '48215633':"METRO –¢—Ä–æ–µ—â–∏–Ω–∞ –Ω–∞ –°.–õ–∏—Ñ–∞—Ä—è 2–ê",
                              '48215612':"METRO –û–¥–µ—Å–∞",
                              '48215614':"METRO –î–Ω—ñ–ø—Ä–æ",
                              '48215618':"METRO –ó–∞–ø–æ—Ä—ñ–∂–∂—è",
                              '48215621':"METRO –í—ñ–Ω–Ω–∏—Ü—è",
                              '48215632':"METRO –•–∞—Ä–∫—ñ–≤",
                              '48215637':"METRO –õ—å–≤—ñ–≤",
                              '48215639':"METRO –ñ–∏—Ç–æ–º–∏—Ä",
                            'Vyshhorod':"METRO - –í–∏—à–≥–æ—Ä–æ–¥", 
                            'Vyshneve':"METRO - –í–∏—à–Ω–µ–≤–µ", 
                            'Irpin':"METRO - –Ü—Ä–ø—ñ–Ω—å", 
                            'Brovary':"METRO - –ë—Ä–æ–≤–∞—Ä–∏", 
                            'Boryspil':"METRO - –ë–æ—Ä–∏—Å–ø—ñ–ª—å"},
                     'Novus':{'482010105':"NOVUS SkyMall –Ω–∞ –ø—Ä.–í–∞—Ç—É—Ç—ñ–Ω–∞ 2–¢",
                              '48201029':"NOVUS –Ω–∞ –ö—ñ–ª—å—Ü–µ–≤–∞ 12",
                              '48201070':"NOVUS –Ω–∞ –ó–¥–æ–ª–±—É–Ω—ñ–≤—Å—å–∫–∞ 7",
                            'Vyshhorod':"NOVUS - –í–∏—à–≥–æ—Ä–æ–¥", 
                            'Vyshneve':"NOVUS - –í–∏—à–Ω–µ–≤–µ", 
                            'Irpin':"NOVUS - –Ü—Ä–ø—ñ–Ω—å", 
                            'Brovary':"NOVUS - –ë—Ä–æ–≤–∞—Ä–∏", 
                            'Boryspil':"NOVUS - –ë–æ—Ä–∏—Å–ø—ñ–ª—å"},
                     'Ashan':{'48246403':"–ê—à–∞–Ω –Ω–∞ –ö—ñ–ª—å—Ü–µ–≤–∞ 4",
                              '48246401':"–ê—à–∞–Ω –ü–µ—Ç—Ä—ñ–≤–∫–∞ –Ω–∞ –ø—Ä. –°.–ë–∞–Ω–¥–µ—Ä–∏ 15–ê",
                              '48246414':"–ê—à–∞–Ω Rive Gauche –Ω–∞ –ó–¥–æ–ª–±—É–Ω—ñ–≤—Å—å–∫–∞, 17",
                              '48246409':"–ê—à–∞–Ω –õ—å–≤—ñ–≤",
                              '48246414':"–ê—à–∞–Ω –†—ñ–≤–Ω–µ",
                              '48246416':"–ê—à–∞–Ω –û–¥–µ—Å–∞",
                              '48246429':"–ê—à–∞–Ω –î–Ω—ñ–ø—Ä–æ",
                            'Vyshhorod':"–ê—à–∞–Ω - –í–∏—à–≥–æ—Ä–æ–¥", 
                            'Vyshneve':"–ê—à–∞–Ω - –í–∏—à–Ω–µ–≤–µ", 
                            'Irpin':"–ê—à–∞–Ω - –Ü—Ä–ø—ñ–Ω—å", 
                            'Brovary':"–ê—à–∞–Ω - –ë—Ä–æ–≤–∞—Ä–∏", 
                            'Boryspil':"–ê—à–∞–Ω - –ë–æ—Ä–∏—Å–ø—ñ–ª—å", 
                            'Obukhiv':"–ê—à–∞–Ω - –û–±—É—Ö—ñ–≤"},
                     'Furshet':{'48215514':"–§—É—Ä—à–µ—Ç –ù–∏–≤–∫–∏",
                                '48215518':"–§—É—Ä—à–µ—Ç –Ü–Ω–∂–µ–Ω–µ—Ä–Ω–∞",
                                '48215525':"–§—É—Ä—à–µ—Ç –†–∞–π–¥—É–∂–Ω–∞",
                                '48215556':"–§—É—Ä—à–µ—Ç –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞"}}
#CHAIN_STORES_ALIAS_DICT = {} 
CHAIN_LINK_DICT = {'Megamarket':"https://megamarket.zakaz.ua/uk/",
                   'Metro':"https://beta.metro.zakaz.ua/uk",
                   'Novus':"https://novus.zakaz.ua/uk/",
                   'Ashan':"https://beta.auchan.zakaz.ua/uk/",
                   'Furshet':"https://furshet.zakaz.ua/uk/"}


#Support different delivery schedule from the same stores but for suburb
SUBURB_STORES = {
    'Megamarket':{
        'Vyshhorod': '48267602', 
         'Vyshneve':'48267602', 
         'Irpin':'48267602', 
         'Brovary':'48267601', 
         'Boryspil':'48267601'},
    'Metro':{
        'Vyshhorod': '48215633', 
         'Vyshneve':'48215611', 
         'Irpin':'48215633', 
         'Brovary':'48215610', 
         'Boryspil':'48215610'},
    'Novus':{
        'Vyshhorod': '482010105', 
         'Vyshneve':'48201029', 
         'Irpin':'482010105', 
         'Brovary':'48201070', 
         'Boryspil':'48201070'},
    'Ashan':{
        'Vyshhorod': '48246401', 
         'Vyshneve':'48246403', 
         'Irpin':'48246401', 
         'Brovary':'48246414', 
         'Boryspil':'48246414', 
         'Obukhiv':'48246403'}}
    
SUBURB_COORDINATES = {
    'Vyshhorod': '50.582268,30.4908301', 
     'Vyshneve':'50.387402, 30.375242', 
     'Irpin':'50.5215594,30.2447725', 
     'Brovary':'50.50481130000001,30.7848282', 
     'Boryspil':'50.3501905,30.9564207', 
     'Obukhiv':'50.1304974,30.6550965'}


# Enable logging
logger = logging.getLogger(__name__) 
logger.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
# Write log to the file
fileHandler = logging.FileHandler(LOG, encoding='utf-8') #mode='w'
#fileHandler.setLevel(logging.DEBUG)
fileHandler.setFormatter(formatter)
logger.addHandler(fileHandler)
# Print log to the screen
consoleHandler = logging.StreamHandler()
#consoleHandler.setLevel(logging.INFO)
consoleHandler.setFormatter(formatter)
logger.addHandler(consoleHandler)

#######################################################
class Monitoring(Thread):
    """Class for monitoring thread"""
    def __init__(self, updater):
        super(Monitoring, self).__init__()
        self.running = True
        self.updater = updater
        self.init_status = {}

    def store_check_free_slot_(self, chain_id, chain_users_dict):
        if len(chain_users_dict)>0:
            for store_id in chain_users_dict.keys():
                store_users_dict = chain_users_dict[store_id]
                store_description = CHAIN_STORES_DICT[chain_id][store_id]
                store_link = CHAIN_LINK_DICT[chain_id]
                try:
                    self.init_status[str(chain_id)+"_"+str(store_id)]
                except:
                    self.init_status[str(chain_id)+"_"+str(store_id)] = False   
                if len(store_users_dict)>0:
                    logger.info('Checking {}, {}, {}, monitoring users: {}'.format(chain_id,store_id,store_description,len(store_users_dict)))
                    #check if it's suburb - use another function
                    if store_id[0].isdigit():
                        del_plan = get_delivery_plan(chain_id, store_id)
                    else:
                        del_plan = get_delivery_plan_suburb(chain_id, store_id)
                    status = check_status_stores(del_plan)
                    if status[0]:
                        logger.info('Free slot in {}, {}'.format(chain_id,store_id))               
                        if self.init_status[str(chain_id)+"_"+str(store_id)] != status[2]:
                            for usr in store_users_dict.keys():
                                try:
                                    self.updater.bot.send_message(chat_id=usr, text="üòé –Ñ –≤—ñ–ª—å–Ω–∏–π —Å–ª–æ—Ç –≤ –≥—Ä–∞—Ñ—ñ–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏ {}. –ù–∞–π–±–ª–∏–∂—á–∏–π {}, {} \n{} \n–Ø –ø–æ–≤—ñ–¥–æ–º–ª—é –ø—Ä–æ –∑–º—ñ–Ω–∏.".format(store_description,status[1],status[2],store_link), disable_web_page_preview=True)
                                except Unauthorized:
                                    logger.info("User {}, {} blocked bot, removing from subscription list".format(usr, store_users_dict[usr])) 
                                    # delete users from subscription list if he blocked bot
                                    try:
                                        with open(CHAIN_USERS_PICKLE_DICT[chain_id], 'rb') as f:
                                                stores = pickle.load(f)
                                    except:
                                        stores = {}
                                    try:
                                        registered_users = stores[store_id]
                                        registered_users.pop(usr, None)
                                        stores.update({store_id:registered_users})
                                    except:
                                        stores.update({store_id:{}})
                                    with open(CHAIN_USERS_PICKLE_DICT[chain_id], 'wb') as f:
                                        pickle.dump(stores, f)
                                    logger.info("{} {} user dict: {}".format(chain_id, store_id, stores[store_id])) 
                                except TimedOut:
                                    logger.info("Message sending timed out..")                         
                    elif self.init_status[str(chain_id)+"_"+str(store_id)] != False:
                        for usr in store_users_dict.keys():
                            try:
                                self.updater.bot.send_message(chat_id=usr, text="üòï –ë—ñ–ª—å—à–µ –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤ –≤ –≥—Ä–∞—Ñ—ñ–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏ {}. –ü–æ–≤—ñ–¥–æ–º–ª—é –∫–æ–ª–∏ –∑‚Äô—è–≤–∏—Ç—å—Å—è.".format(store_description))
                            except Unauthorized:
                                    logger.info("User blocked bot: {},{}".format(usr, store_users_dict[usr])) 
                            except TimedOut:
                                    logger.info("Message sending timed out..") 
                    self.init_status[str(chain_id)+"_"+str(store_id)] = status[2] 
                    
    def run(self):
        while self.running:
            # Zakaz.ua store monitoring
            for chain_id, chain_pickle in CHAIN_USERS_PICKLE_DICT.items():
                try:
                    with open(chain_pickle, 'rb') as f:
                            chain_stores = pickle.load(f)
                except:
                    chain_stores = {}
                self.store_check_free_slot_(chain_id, chain_stores) 
            # Make less frequent checks at night
            current_time = datetime.now().strftime("%H:%M")
            if (int(current_time[:2])>8)&(int(current_time[:2])<23):
                time.sleep(300+np.random.randint(-5,5))
            else:
                time.sleep(1800+np.random.randint(-5,5))

##############################################################     
    
# Define command handlers
def start(update, context):
    logger.info("User {} started bot".format(update.effective_user["id"])) #update.message.chat_id
    update.message.reply_text('–ü—Ä–∏–≤—ñ—Ç, {}'.format(update.message.from_user.first_name))
    #custom keyborad
    custom_keyboard = [['/start', '/select_chain'],['/status', '/help']]  #/donate
    reply_markup = ReplyKeyboardMarkup(keyboard=custom_keyboard, resize_keyboard=True, one_time_keyboard=True)
    context.bot.send_message(chat_id=update.effective_chat.id
                             , text="""–¶–µ–π –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤ —É –≥—Ä–∞—Ñ—ñ–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏ –º–∞–≥–∞–∑–∏–Ω—ñ–≤ –Ω–∞ zakaz.ua (–º–µ—Ä–µ–∂—ñ –ú–µ–≥–∞–º–∞—Ä–∫–µ—Ç, –ú–µ—Ç—Ä–æ, –ù–æ–≤—É—Å, –ê—à–∞–Ω —Ç–∞ –§—É—Ä—à–µ—Ç). 
    –ù–∞–∂–∞–ª—å, —á–µ—Ä–µ–∑ —Ä—ñ–∑–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–µ—Ä–µ–¥ –º–∞–≥–∞–∑–∏–Ω—ñ–≤ —Ç–∞ —ó—Ö –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥—ñ–ª—É, –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î—Ç—å—Å—è –ø–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º –º–∞–≥–∞–∑–∏–Ω–∞–º–∏ –∞ –Ω–µ –∑–∞ —Ä–∞–π–æ–Ω–∞–º–∏.
    –û–±–µ—Ä—ñ—Ç—å –º–µ—Ä–µ–∂—É —Ç–∞ –º–∞–≥–∞–∑–∏–Ω–∏ –¥–ª—è –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞–Ω–Ω—è —É /select_chain"""
                             , reply_markup=reply_markup)
    # save unique users to pickle (open existing)
    try:
        with open(USERS_PICKLE, 'rb') as f:
                registered_users = pickle.load(f)
    except:
        registered_users = {}
    registered_users[update.effective_chat.id] = (update.effective_user["first_name"], update.effective_user["last_name"])
    with open(USERS_PICKLE, 'wb') as f:
        pickle.dump(registered_users, f)
    logger.info("user dict: {}".format(registered_users))
    #return monitoring
    
def help(update, context):
    context.bot.send_message(chat_id=update.effective_chat.id,
                            text="""
    –¶–µ–π –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤ —É –≥—Ä–∞—Ñ—ñ–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏ –º–∞–≥–∞–∑–∏–Ω—ñ–≤ –Ω–∞ zakaz.ua (–º–µ—Ä–µ–∂—ñ –ú–µ–≥–∞–º–∞—Ä–∫–µ—Ç, –ú–µ—Ç—Ä–æ, –ù–æ–≤—É—Å, –ê—à–∞–Ω —Ç–∞ –§—É—Ä—à–µ—Ç).
–ù–∞–∂–∞–ª—å, —á–µ—Ä–µ–∑ —Ä—ñ–∑–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–µ—Ä–µ–¥ –º–∞–≥–∞–∑–∏–Ω—ñ–≤ —Ç–∞ —ó—Ö –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥—ñ–ª—É, –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î—Ç—å—Å—è –ø–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º –º–∞–≥–∞–∑–∏–Ω–∞–º–∏ –∞ –Ω–µ –∑–∞ —Ä–∞–π–æ–Ω–∞–º–∏.
Supported commands:
/start - –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
/select_chain - –°—Ç–µ–∂–∏—Ç–∏ –∑–∞ –Ω–∞—è–≤–Ω–∏–º–∏ –º—ñ—Å—Ü—è–º–∏ –≤ –≥—Ä–∞—Ñ—ñ–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏ –º–∞–≥–∞–∑–∏–Ω—ñ–≤
/status - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω–∏
/help - –û–ø–∏—Å –±–æ—Ç–∞, –∫–æ–º–∞–Ω–¥
/donate - –î–æ–ø–æ–º–æ–≥—Ç–∏ –ø—Ä–æ–µ–∫—Ç—É

–ê–≤—Ç–æ—Ä –±–æ—Ç—É: @oyeryomenko""")

def text(update, context):
    context.bot.send_message(chat_id=update.effective_chat.id, text=update.message.text+" üòÉ")  #chat_id=update.message.chat_id
    

def select_chain(update, context):
    store_list = ['Megamarket', 'Ashan', 'Novus', 'Metro', 'Furshet']       
    inline_kb = [[InlineKeyboardButton(s,callback_data="selected_chain "+s)] for s in store_list]    
    reply_markup = InlineKeyboardMarkup(inline_kb)
    update.message.reply_text('–û–±–µ—Ä—ñ—Ç—å –º–µ—Ä–µ–∂—É:', reply_markup=reply_markup)    

def select_store(update, context):
    query = update.callback_query
    code = query.data.split(' ')[-1]
    context.bot.answer_callback_query(query.id, "–í–∏ –æ–±—Ä–∞–ª–∏ –º–µ—Ä–µ–∂—É {}".format(code))
    crossIcon = u"\u274C"
    checkIcon = u"\u2705"
    if code=='Megamarket': 
        inline_kb = [[InlineKeyboardButton(checkIcon+" –ú–µ–≥–∞–ú–∞—Ä–∫–µ—Ç –°—É—Ä–∫–æ–≤–∞ 3", callback_data='monitor_store Megamarket 48267601'), 
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Megamarket 48267601')],
                     [InlineKeyboardButton(checkIcon+" –ú–µ–≥–∞–ú–∞—Ä–∫–µ—Ç –ö–æ—Å–º–æ–ø–æ–ª—ñ—Ç", callback_data='monitor_store Megamarket 48267602'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Megamarket 48267602')],
                     [InlineKeyboardButton(checkIcon+" –ú–µ–≥–∞–ú–∞—Ä–∫–µ—Ç –í–∏—à–≥–æ—Ä–æ–¥", callback_data='monitor_store Megamarket Vyshhorod'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Megamarket Vyshhorod')],
                     [InlineKeyboardButton(checkIcon+" –ú–µ–≥–∞–ú–∞—Ä–∫–µ—Ç –í–∏—à–Ω–µ–≤–µ", callback_data='monitor_store Megamarket Vyshneve'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Megamarket Vyshneve')],
                     [InlineKeyboardButton(checkIcon+" –ú–µ–≥–∞–ú–∞—Ä–∫–µ—Ç –Ü—Ä–ø—ñ–Ω—å", callback_data='monitor_store Megamarket Irpin'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Megamarket Irpin')],
                     [InlineKeyboardButton(checkIcon+" –ú–µ–≥–∞–ú–∞—Ä–∫–µ—Ç –ë—Ä–æ–≤–∞—Ä–∏", callback_data='monitor_store Megamarket Brovary'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Megamarket Brovary')],
                     [InlineKeyboardButton(checkIcon+" –ú–µ–≥–∞–ú–∞—Ä–∫–µ—Ç –ë–æ—Ä–∏—Å–ø—ñ–ª—å", callback_data='monitor_store Megamarket Boryspil'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Megamarket Boryspil')]
                    ]
        reply_markup = InlineKeyboardMarkup(inline_kb)
        #context.bot.send_message(chat_id=query.message.chat_id, text='–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤—ñ–ª—å–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º –º–∞–≥–∞–∑–∏–Ω–∞–º, —â–æ –Ω–∞–π–≤–∏—Ä–æ–≥—ñ–¥–Ω—ñ—à–µ –æ–±—Å–ª—É–≥–æ–≤—É—é—Ç—å –≤–∞—à —Ä–∞–π–æ–Ω:', reply_markup=reply_markup) 
        #update.message.reply_text('–û–±–µ—Ä—ñ—Ç—å –Ω–∞ —è–∫–∏–π –º–∞–≥–∞–∑–∏–Ω —â–æ –∑–¥—ñ–π—Å–Ω—é—î –¥–æ—Å—Ç–∞–≤–∫—É –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è:', reply_markup=reply_markup)   
    
    elif code=='Metro':    
        inline_kb = [[InlineKeyboardButton(checkIcon+" METRO –Ω–∞ –ì—Ä–∏–≥–æ—Ä–µ–Ω–∫–∞ 43", callback_data='monitor_store Metro 48215610'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Metro 48215610')],
                     [InlineKeyboardButton(checkIcon+" METRO –¢–µ—Ä–µ–º–∫–∏", callback_data='monitor_store Metro 48215611'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Metro 48215611')],
                     [InlineKeyboardButton(checkIcon+" METRO –¢—Ä–æ–µ—â–∏–Ω–∞", callback_data='monitor_store Metro 48215633'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Metro 48215633')],
                     [InlineKeyboardButton(checkIcon+" METRO –í–∏—à–≥–æ—Ä–æ–¥", callback_data='monitor_store Metro Vyshhorod'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Metro Vyshhorod')],
                     [InlineKeyboardButton(checkIcon+" METRO –í–∏—à–Ω–µ–≤–µ", callback_data='monitor_store Metro Vyshneve'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Metro Vyshneve')],
                     [InlineKeyboardButton(checkIcon+" METRO –Ü—Ä–ø—ñ–Ω—å", callback_data='monitor_store Metro Irpin'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Metro Irpin')],
                     [InlineKeyboardButton(checkIcon+" METRO –ë—Ä–æ–≤–∞—Ä–∏", callback_data='monitor_store Metro Brovary'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Metro Brovary')],
                     [InlineKeyboardButton(checkIcon+" METRO –ë–æ—Ä–∏—Å–ø—ñ–ª—å", callback_data='monitor_store Metro Boryspil'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Metro Boryspil')],
                     [InlineKeyboardButton(checkIcon+" METRO –û–¥–µ—Å–∞", callback_data='monitor_store Metro 48215612'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Metro 48215612')],
                     [InlineKeyboardButton(checkIcon+" METRO –î–Ω—ñ–ø—Ä–æ", callback_data='monitor_store Metro 48215614'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Metro 48215614')],
                     [InlineKeyboardButton(checkIcon+" METRO –ó–∞–ø–æ—Ä—ñ–∂–∂—è", callback_data='monitor_store Metro 48215618'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Metro 48215618')],
                     [InlineKeyboardButton(checkIcon+" METRO –í—ñ–Ω–Ω–∏—Ü—è", callback_data='monitor_store Metro 48215621'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Metro 48215621')],
                     [InlineKeyboardButton(checkIcon+" METRO –•–∞—Ä–∫—ñ–≤", callback_data='monitor_store Metro 48215632'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Metro 48215632')],
                     [InlineKeyboardButton(checkIcon+" METRO –õ—å–≤—ñ–≤", callback_data='monitor_store Metro 48215637'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Metro 48215637')],     
                     [InlineKeyboardButton(checkIcon+" METRO –ñ–∏—Ç–æ–º–∏—Ä", callback_data='monitor_store Metro 48215639'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Metro 48215639')]]
        reply_markup = InlineKeyboardMarkup(inline_kb)
        #context.bot.send_message(chat_id=query.message.chat_id, text='–û–±–µ—Ä—ñ—Ç—å –Ω–∞ —è–∫–∏–π –º–∞–≥–∞–∑–∏–Ω —â–æ –∑–¥—ñ–π—Å–Ω—é—î –¥–æ—Å—Ç–∞–≤–∫—É –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è:', reply_markup=reply_markup) 
     
    elif code=='Novus':    
        inline_kb = [[InlineKeyboardButton(checkIcon+" NOVUS SkyMall", callback_data='monitor_store Novus 482010105'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Novus 482010105')],
                     [InlineKeyboardButton(checkIcon+" NOVUS –Ω–∞ –ö—ñ–ª—å—Ü–µ–≤–∞ 12", callback_data='monitor_store Novus 48201029'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Novus 48201029')],
                     [InlineKeyboardButton(checkIcon+" NOVUS –ó–¥–æ–ª–±—É–Ω—ñ–≤—Å—å–∫–∞ 7–ì", callback_data='monitor_store Novus 48201070'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Novus 48201070')],
                     [InlineKeyboardButton(checkIcon+" NOVUS –í–∏—à–≥–æ—Ä–æ–¥", callback_data='monitor_store Novus Vyshhorod'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Novus Vyshhorod')],
                     [InlineKeyboardButton(checkIcon+" NOVUS –í–∏—à–Ω–µ–≤–µ", callback_data='monitor_store Novus Vyshneve'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Novus Vyshneve')],
                     [InlineKeyboardButton(checkIcon+" NOVUS –Ü—Ä–ø—ñ–Ω—å", callback_data='monitor_store Novus Irpin'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Novus Irpin')],
                     [InlineKeyboardButton(checkIcon+" NOVUS –ë—Ä–æ–≤–∞—Ä–∏", callback_data='monitor_store Novus Brovary'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Novus Brovary')],
                     [InlineKeyboardButton(checkIcon+" NOVUS –ë–æ—Ä–∏—Å–ø—ñ–ª—å", callback_data='monitor_store Novus Boryspil'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Novus Boryspil')]]
        reply_markup = InlineKeyboardMarkup(inline_kb)
        #context.bot.send_message(chat_id=query.message.chat_id, text='–û–±–µ—Ä—ñ—Ç—å –Ω–∞ —è–∫–∏–π –º–∞–≥–∞–∑–∏–Ω —â–æ –∑–¥—ñ–π—Å–Ω—é—î –¥–æ—Å—Ç–∞–≤–∫—É –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è:', reply_markup=reply_markup) 
        
    elif code=='Ashan':    
        inline_kb = [[InlineKeyboardButton(checkIcon+" –ê—à–∞–Ω –Ω–∞ –ö—ñ–ª—å—Ü–µ–≤–∞ 4", callback_data='monitor_store Ashan 48246403'), 
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Ashan 48246403')],
                     [InlineKeyboardButton(checkIcon+" –ê—à–∞–Ω –ü–µ—Ç—Ä—ñ–≤–∫–∞", callback_data='monitor_store Ashan 48246401'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Ashan 48246401')],
                     [InlineKeyboardButton(checkIcon+" –ê—à–∞–Ω Rive Gauche", callback_data='monitor_store Ashan 48246414'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Ashan 48246414')],
                     [InlineKeyboardButton(checkIcon+" –ê—à–∞–Ω –í–∏—à–≥–æ—Ä–æ–¥", callback_data='monitor_store Ashan Vyshhorod'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Ashan Vyshhorod')],
                     [InlineKeyboardButton(checkIcon+" –ê—à–∞–Ω –í–∏—à–Ω–µ–≤–µ", callback_data='monitor_store Ashan Vyshneve'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Ashan Vyshneve')],
                     [InlineKeyboardButton(checkIcon+" –ê—à–∞–Ω –Ü—Ä–ø—ñ–Ω—å", callback_data='monitor_store Ashan Irpin'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Ashan Irpin')],
                     [InlineKeyboardButton(checkIcon+" –ê—à–∞–Ω –ë—Ä–æ–≤–∞—Ä–∏", callback_data='monitor_store Ashan Brovary'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Ashan Brovary')],
                     [InlineKeyboardButton(checkIcon+" –ê—à–∞–Ω –ë–æ—Ä–∏—Å–ø—ñ–ª—å", callback_data='monitor_store Ashan Boryspil'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Ashan Boryspil')],
                     [InlineKeyboardButton(checkIcon+" –ê—à–∞–Ω –û–±—É—Ö—ñ–≤", callback_data='monitor_store Ashan Obukhiv'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Ashan Obukhiv')],
                     [InlineKeyboardButton(checkIcon+" –ê—à–∞–Ω –õ—å–≤—ñ–≤", callback_data='monitor_store Ashan 48246409'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Ashan 48246409')],
                     [InlineKeyboardButton(checkIcon+" –ê—à–∞–Ω –†—ñ–≤–Ω–µ", callback_data='monitor_store Ashan 48246414'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Ashan 48246414')],
                     [InlineKeyboardButton(checkIcon+" –ê—à–∞–Ω –û–¥–µ—Å–∞", callback_data='monitor_store Ashan 48246416'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Ashan 48246416')],
                     [InlineKeyboardButton(checkIcon+" –ê—à–∞–Ω –î–Ω—ñ–ø—Ä–æ", callback_data='monitor_store Ashan 48246429'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Ashan 48246429')]]
        reply_markup = InlineKeyboardMarkup(inline_kb)
        #context.bot.send_message(chat_id=query.message.chat_id, text='–û–±–µ—Ä—ñ—Ç—å –Ω–∞ —è–∫–∏–π –º–∞–≥–∞–∑–∏–Ω —â–æ –∑–¥—ñ–π—Å–Ω—é—î –¥–æ—Å—Ç–∞–≤–∫—É –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è:', reply_markup=reply_markup) 

    elif code=='Furshet':
        inline_kb = [[InlineKeyboardButton(checkIcon+" –§—É—Ä—à–µ—Ç –ù–∏–≤–∫–∏", callback_data='monitor_store Furshet 48215514'), 
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Furshet 48215514')],
                     [InlineKeyboardButton(checkIcon+" –§—É—Ä—à–µ—Ç –Ü–Ω–∂–µ–Ω–µ—Ä–Ω–∞", callback_data='monitor_store Furshet 48215518'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Furshet 48215518')],
                     [InlineKeyboardButton(checkIcon+" –§—É—Ä—à–µ—Ç –†–∞–π–¥—É–∂–Ω–∞", callback_data='monitor_store Furshet 48215525'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Furshet 48215525')],
                     [InlineKeyboardButton(checkIcon+" –§—É—Ä—à–µ—Ç –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞", callback_data='monitor_store Furshet 48215556'),
                      InlineKeyboardButton(crossIcon+" –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è", callback_data='unsubscribe_store Furshet 48215556')]]
        reply_markup = InlineKeyboardMarkup(inline_kb)
    context.bot.send_message(chat_id=query.message.chat_id, text='–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤—ñ–ª—å–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ zakaz.ua –ø–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º –º–∞–≥–∞–∑–∏–Ω–∞–º, —â–æ –Ω–∞–π–≤–∏—Ä–æ–≥—ñ–¥–Ω—ñ—à–µ –æ–±—Å–ª—É–≥–æ–≤—É—é—Ç—å –≤–∞—à —Ä–∞–π–æ–Ω:', reply_markup=reply_markup, disable_web_page_preview=True) 


def register_monitoring_user(update, context):
    logger.info("User {} registered for {}".format(update.effective_user["id"],update.callback_query.data)) 
    query = update.callback_query
    store_code = query.data.split(' ')[-1]
    chain_code = query.data.split(' ')[-2]
    context.bot.answer_callback_query(query.id, "–í–∏ —Ä–µ—î—Å—Ç—Ä—É—î—Ç–µ—Å—è –Ω–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ {}, –º–∞–≥–∞–∑–∏–Ω {}".format(chain_code, store_code))
    if chain_code=='Megamarket':
        # save users to pickle (open existing)
        try:
            with open(MM_USERS_PICKLE, 'rb') as f:
                    stores = pickle.load(f)
        except:
            stores = {}
        try:
            registered_users = stores[store_code]
            registered_users[update.effective_chat.id] = (update.effective_user["first_name"], update.effective_user["last_name"])
            stores.update({store_code:registered_users})
        except:
            stores.update({store_code:{update.effective_chat.id:(update.effective_user["first_name"], update.effective_user["last_name"])}})
        with open(MM_USERS_PICKLE, 'wb') as f:
            pickle.dump(stores, f)
        logger.info("Megamarket {} user dict: {}".format(store_code, stores[store_code])) 

    elif chain_code=='Metro':
        # save users to pickle (open existing)
        try:
            with open(METRO_USERS_PICKLE, 'rb') as f:
                    stores = pickle.load(f)
        except:
            stores = {}
        try:
            registered_users = stores[store_code]
            registered_users[update.effective_chat.id] = (update.effective_user["first_name"], update.effective_user["last_name"])
            stores.update({store_code:registered_users})
        except:
            stores.update({store_code:{update.effective_chat.id:(update.effective_user["first_name"], update.effective_user["last_name"])}})
        with open(METRO_USERS_PICKLE, 'wb') as f:
            pickle.dump(stores, f)
        logger.info("Metro {} user dict: {}".format(store_code, stores[store_code])) 
        
    elif chain_code=='Novus':
        # save users to pickle (open existing)
        try:
            with open(NOVUS_USERS_PICKLE, 'rb') as f:
                    stores = pickle.load(f)
        except:
            stores = {}
        try:
            registered_users = stores[store_code]
            registered_users[update.effective_chat.id] = (update.effective_user["first_name"], update.effective_user["last_name"])
            stores.update({store_code:registered_users})
        except:
            stores.update({store_code:{update.effective_chat.id:(update.effective_user["first_name"], update.effective_user["last_name"])}})
        with open(NOVUS_USERS_PICKLE, 'wb') as f:
            pickle.dump(stores, f)
        logger.info("Novus {} user dict: {}".format(store_code, stores[store_code])) 
        
    elif chain_code=='Ashan':
        # save users to pickle (open existing)
        try:
            with open(ASHAN_USERS_PICKLE, 'rb') as f:
                    stores = pickle.load(f)
        except:
            stores = {}
        try:
            registered_users = stores[store_code]
            registered_users[update.effective_chat.id] = (update.effective_user["first_name"], update.effective_user["last_name"])
            stores.update({store_code:registered_users})
        except:
            stores.update({store_code:{update.effective_chat.id:(update.effective_user["first_name"], update.effective_user["last_name"])}})
        with open(ASHAN_USERS_PICKLE, 'wb') as f:
            pickle.dump(stores, f)
        logger.info("Ashan {} user dict: {}".format(store_code, stores[store_code])) 
    
    elif chain_code=='Furshet':
        # save users to pickle (open existing)
        try:
            with open(FURSHET_USERS_PICKLE, 'rb') as f:
                    stores = pickle.load(f)
        except:
            stores = {}
        try:
            registered_users = stores[store_code]
            registered_users[update.effective_chat.id] = (update.effective_user["first_name"], update.effective_user["last_name"])
            stores.update({store_code:registered_users})
        except:
            stores.update({store_code:{update.effective_chat.id:(update.effective_user["first_name"], update.effective_user["last_name"])}})
        with open(FURSHET_USERS_PICKLE, 'wb') as f:
            pickle.dump(stores, f)
        logger.info("Furshet {} user dict: {}".format(store_code, stores[store_code])) 
    store_description = CHAIN_STORES_DICT[chain_code][store_code]
    context.bot.send_message(chat_id=update.effective_chat.id, text="ü§ì –í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ {}.".format(store_description))
    #Check current status immediately:
    if store_code[0].isdigit():
        del_plan = get_delivery_plan(chain_code, store_code)
    else:
        del_plan = get_delivery_plan_suburb(chain_code, store_code)
    status = check_status_stores(del_plan)
    if status[0]:
        try:
            context.bot.send_message(chat_id=update.effective_chat.id, text="üòä –ü–æ—â–∞—Å—Ç–∏–ª–æ! –ó–∞—Ä–∞–∑ —î –≤—ñ–ª—å–Ω–∏–π —Å–ª–æ—Ç –≤ –≥—Ä–∞—Ñ—ñ–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏ - {}, {} \n{} \n–Ø –ø–æ–≤—ñ–¥–æ–º–ª—é –ø—Ä–æ –∑–º—ñ–Ω–∏.".format(status[1],status[2],CHAIN_LINK_DICT[chain_code]), disable_web_page_preview=True)
        except:
            pass
    else:
        context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–∞–∂–∞–ª—å –Ω–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤ –≤ –≥—Ä–∞—Ñ—ñ–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏. \n–Ø –ø–æ–≤—ñ–¥–æ–º–ª—é –∫–æ–ª–∏ –∑'—è–≤–∏—Ç—å—Å—è –≤—ñ–ª—å–Ω–µ –≤—ñ–∫–Ω–æ.")
                     
                     
def unsubscribe_monitoring_user(update, context):
    logger.info("User {} {}".format(update.effective_user["id"],update.callback_query.data)) 
    query = update.callback_query
    store_code = query.data.split(' ')[-1]
    chain_code = query.data.split(' ')[-2]
    context.bot.answer_callback_query(query.id, "–í–∏ –≤—ñ–¥–ø–∏—Å—É—î—Ç–µ—Å—è –≤—ñ–¥ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É {},{}".format(chain_code,store_code))
    
    if chain_code=='Megamarket':
        # save users to pickle (open existing)
        try:
            with open(MM_USERS_PICKLE, 'rb') as f:
                    stores = pickle.load(f)
        except:
            stores = {}
        try:
            registered_users = stores[store_code]
            registered_users.pop(update.effective_chat.id, None)
            stores.update({store_code:registered_users})
        except:
            stores.update({store_code:{}})
        with open(MM_USERS_PICKLE, 'wb') as f:
            pickle.dump(stores, f)
        logger.info("Megamarket {} user dict: {}".format(store_code, stores[store_code])) 
        
    elif chain_code=='Metro':
        # save users to pickle (open existing)
        try:
            with open(METRO_USERS_PICKLE, 'rb') as f:
                    stores = pickle.load(f)
        except:
            stores = {}
        try:
            registered_users = stores[store_code]
            registered_users.pop(update.effective_chat.id, None)
            stores.update({store_code:registered_users})
        except:
            stores.update({store_code:{}})
        with open(METRO_USERS_PICKLE, 'wb') as f:
            pickle.dump(stores, f)
        logger.info("Metro {} user dict: {}".format(store_code, stores[store_code])) 
        
    elif chain_code=='Novus':
        # save users to pickle (open existing)
        try:
            with open(NOVUS_USERS_PICKLE, 'rb') as f:
                    stores = pickle.load(f)
        except:
            stores = {}
        try:
            registered_users = stores[store_code]
            registered_users.pop(update.effective_chat.id, None)
            stores.update({store_code:registered_users})
        except:
            stores.update({store_code:{}})
        with open(NOVUS_USERS_PICKLE, 'wb') as f:
            pickle.dump(stores, f)
        logger.info("Novus {} user dict: {}".format(store_code, stores[store_code])) 
        
    elif chain_code=='Ashan':
        # save users to pickle (open existing)
        try:
            with open(ASHAN_USERS_PICKLE, 'rb') as f:
                    stores = pickle.load(f)
        except:
            stores = {}
        try:
            registered_users = stores[store_code]
            registered_users.pop(update.effective_chat.id, None)
            stores.update({store_code:registered_users})
        except:
            stores.update({store_code:{}})
        with open(ASHAN_USERS_PICKLE, 'wb') as f:
            pickle.dump(stores, f)
        logger.info("Ashan {} user dict: {}".format(store_code, stores[store_code])) 

    elif chain_code=='Furshet':
        # save users to pickle (open existing)
        try:
            with open(FURSHET_USERS_PICKLE, 'rb') as f:
                    stores = pickle.load(f)
        except:
            stores = {}
        try:
            registered_users = stores[store_code]
            registered_users.pop(update.effective_chat.id, None)
            stores.update({store_code:registered_users})
        except:
            stores.update({store_code:{}})
        with open(FURSHET_USERS_PICKLE, 'wb') as f:
            pickle.dump(stores, f)
        logger.info("Furshet {} user dict: {}".format(store_code, stores[store_code]))    
    store_description = CHAIN_STORES_DICT[chain_code][store_code]
    context.bot.send_message(chat_id=update.effective_chat.id, text="–í–∏ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –≤—ñ–¥ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É {}".format(store_description))  
    
# Show subscription status
def status(update, context):
    status_list = []
    display_status=""
    usr = update.effective_chat.id
    for chain_name, chain_pickle in CHAIN_USERS_PICKLE_DICT.items():
        try:
            with open(chain_pickle, 'rb') as f:
                chain_stores = pickle.load(f)
        except:
                chain_stores = {}
        for store_id, users_dicts in chain_stores.items():
            store_description = CHAIN_STORES_DICT[chain_name][store_id]
            if usr in users_dicts.keys():
                status_list.append((chain_name, store_id, store_description))
                display_status=display_status + store_description +"\n"

    if len(status_list)>0:
        context.bot.send_message(chat_id=usr, text='–í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ –º–∞–≥–∞–∑–∏–Ω–∏: \n{}'.format(display_status))
        crossIcon = u"\u274C"
        inline_kb = [[InlineKeyboardButton(crossIcon+" "+s[2],callback_data='unsubscribe_store {} {}'.format(s[0],s[1]))] for s in status_list]
        reply_markup = InlineKeyboardMarkup(inline_kb)       
        context.bot.send_message(chat_id=usr, text='–í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è?', reply_markup=reply_markup)
    else:
        context.bot.send_message(chat_id=usr, text='–í–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ –∂–æ–¥–µ–Ω –º–∞–≥–∞–∑–∏–Ω')             
                     
# Stop monitoring Thread        
def stop_monitoring(update, context): #t=monitoring
    if update.effective_chat.id==109458488:
        global monitoring  
        update.message.reply_text('OK, end monitoring...')
        monitoring.running = False # stop the thread    
        logger.info("MONITORING STOPPED!!!") 
    else:
        logger.info("User {} {} {} tried to stop monitoring".format(update.effective_user["id"],update.effective_user["first_name"], update.effective_user["last_name"])) 
    
def unknown(update, context):
    context.bot.send_message(chat_id=update.effective_chat.id, text="–©–æ —Ç–∞–∫–µ "+update.message.text+"? ü§î")
    context.bot.send_message(chat_id=update.effective_chat.id, text="–Ø –Ω–µ —Ä–æ–∑—É–º—ñ—é —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")

def error(update, context):
    """Log Errors caused by Updates."""
    logger.warning('Update "%s" caused error "%s"', update, context.error)

def donate(update, context):
    context.bot.send_message(chat_id=update.effective_chat.id, text="–î–æ–ø–æ–º–æ–≥—Ç–∏ –ø—Ä–æ–µ–∫—Ç—É: {}".format(DONATE_LINK), disable_web_page_preview=True)
    logger.info("User {} {} {} was up to donate".format(update.effective_user["id"],update.effective_user["first_name"], update.effective_user["last_name"])) 
    
############ Zakaz.ua scraping
def get_delivery_plan(chain_id, store_id):
    #add random to get request
    #rand_number = np.random.rand()
    #Get delivery schedule plan
    url = "https://stores-api.zakaz.ua/stores/"+store_id+"/delivery_schedule/plan/"  #&some_value={}".format(rand_number)
    headers = {"authority":"stores-api.zakaz.ua"
               ,"path":"/stores/"+store_id+"/delivery_schedule/plan/"
               #,"origin":"https://megamarket.zakaz.ua"
               #,"referer":"https://megamarket.zakaz.ua/uk/"
               ,"user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36"
               #,"x-chain":"megamarket"
              }
    try:
        response = requests.get(url, headers=headers) #, timeout=5
    except requests.exceptions.ConnectionError:
        logger.info(chain_id+" Connection refused")
        return False    
    # print the response status code
    print(response.status_code)
    if response.status_code==200:
        try:
            return response.json()
        except json.decoder.JSONDecodeError:
            logger.info("Response Not JSON: {}".format(response.text))
            return False
        except Exception as e:
            logging.error(e)
            return False
    else:
        logger.info("Error in response from {}: {}".format(chain_id, response.status_code)) 
        return False

def get_delivery_plan_suburb(chain_id, city):
    #get coords:
    coords = SUBURB_COORDINATES[city]
    #get store_id:
    store_id = SUBURB_STORES[chain_id][city]
    
    #Get delivery schedule plan
    url = "https://stores-api.zakaz.ua/stores/"+store_id+"/delivery_schedule/plan/?coords="+coords
    headers = {"authority":"stores-api.zakaz.ua"
               ,"path":"/stores/"+store_id+"/delivery_schedule/plan/"
               #,"origin":"https://megamarket.zakaz.ua"
               #,"referer":"https://megamarket.zakaz.ua/uk/"
               ,"user-agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36"
               #,"x-chain":"megamarket"
              }
    try:
        response = requests.get(url, headers=headers) #, timeout=5
    except requests.exceptions.ConnectionError:
        logger.info(chain_id+" Connection refused")
        return False    
    # print the response status code
    print(response.status_code)
    if response.status_code==200:
        try:
            return response.json()
        except json.decoder.JSONDecodeError:
            logger.info("Response Not JSON: {}".format(response.text))
            return False
        except Exception as e:
            logging.error(e)
            return False
    else:
        logger.info("Error in response from {}: {}".format(chain_id, response.status_code)) 
        return False

def check_status_stores(json):
    if json==False:
        return(False, False, False)
    else:
        status = None
        for day in json:
            for slot in day[list(day.keys())[1]]:
                if slot['is_open']:
                    status = True
                    date = slot['date']
                    time = slot['time_range']
                    return(status, date, time)
        return(False, False, False)
############

def main():
    # Create Updater instance
    updater = Updater(token=TOKEN, use_context=True)

    # Register handlers in Dispatcher
    start_handler = CommandHandler('start', start) # start handler
    updater.dispatcher.add_handler(start_handler)   # register start handler
    updater.dispatcher.add_handler(CommandHandler('help', help))
    updater.dispatcher.add_handler(CommandHandler('select_chain', select_chain))
    updater.dispatcher.add_handler(CommandHandler('status', status))
    updater.dispatcher.add_handler(CallbackQueryHandler(select_store, pattern=r'^selected_chain '))     
    updater.dispatcher.add_handler(CallbackQueryHandler(register_monitoring_user, pattern=r'^monitor_store ')) 
    updater.dispatcher.add_handler(CallbackQueryHandler(unsubscribe_monitoring_user, pattern=r'^unsubscribe_store ')) 
    updater.dispatcher.add_handler(CommandHandler('stop_monitoring', stop_monitoring)) 
    updater.dispatcher.add_handler(CommandHandler('donate', donate))
    updater.dispatcher.add_handler(MessageHandler(Filters.text, text))
    updater.dispatcher.add_handler(MessageHandler(Filters.command, unknown))
    #error logging handler
    updater.dispatcher.add_error_handler(error)

    # Run bot
    updater.start_polling()
    # Start monitoring in thread
    global monitoring  
    monitoring = Monitoring(updater) # create parallel thread
    monitoring.daemon = True # stop the thread if the main thread quits
    monitoring.start()
    #print(threading.active_count())
    
    # Stop the Bot when Ctrl+C received
    updater.idle()

if __name__ == '__main__':
    logger.info("Starting bot")
    main()